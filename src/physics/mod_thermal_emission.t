! module mod_thermal_emission -- synthesize emission flux of some
! thermal lines
! EUV lines database: 
! 'He_II_304' 'Fe_IX_171' 'Fe_XXIV_193' 'Fe_XIV_211' 'Fe_XVI_335'
! 'Fe_XVIII_94' 'Fe_XXI_131'
! 'Si_IV_1394' 'Si_IV_1403' 'O_IV_1338' 'O_IV_1343' 'O_IV_1397' 'O_IV_1400'
! 'O_IV_1401' 'O_IV_1405' 'Fe_XII_1349' 'Fe_XXI_1351' 'Fe_XXI_1354'
! subroutines: 
! get_EUV: get local EUV emission intensity (for 1d, 2d and 3d)
! get_SXR: get local Soft X-ray emission intensity (for 1d, 2d and 3d)

module mod_thermal_emission
  use mod_global_parameters
  use mod_physics

  implicit none

  integer :: n_aia
  double precision :: t_aia(1:101)
  double precision :: f_94(1:101),f_131(1:101),f_171(1:101)
  double precision :: f_193(1:101),f_211(1:101),f_304(1:101)
  double precision :: f_335(1:101),f_1354(1:101)

  integer :: n_iris
  double precision :: t_iris(1:41)
  double precision :: f_1394(1:41),f_1403(1:41),f_1338(1:41)
  double precision :: f_1343(1:41),f_1397(1:41),f_1400(1:41)
  double precision :: f_1401(1:41),f_1405(1:41),f_1349(1:41)
  double precision :: f_1351(1:41)


  data n_aia / 101 /

  data t_aia / 4. ,  4.05, 4.1,  4.15, 4.2,  4.25, 4.3,  4.35, &
               4.4,  4.45, 4.5,  4.55, 4.6,  4.65, 4.7,  4.75, &
               4.8,  4.85, 4.9,  4.95, 5. ,  5.05, 5.1,  5.15, &
               5.2,  5.25, 5.3,  5.35, 5.4,  5.45, 5.5,  5.55, &
               5.6,  5.65, 5.7,  5.75, 5.8,  5.85, 5.9,  5.95, &
               6. ,  6.05, 6.1,  6.15, 6.2,  6.25, 6.3,  6.35, &
               6.4,  6.45, 6.5,  6.55, 6.6,  6.65, 6.7,  6.75, &
               6.8,  6.85, 6.9,  6.95, 7. ,  7.05, 7.1,  7.15, &
               7.2,  7.25, 7.3,  7.35, 7.4,  7.45, 7.5,  7.55, &
               7.6,  7.65, 7.7,  7.75, 7.8,  7.85, 7.9,  7.95, &
               8. ,  8.05, 8.1,  8.15, 8.2,  8.25, 8.3,  8.35, &
               8.4,  8.45, 8.5,  8.55, 8.6,  8.65, 8.7,  8.75, &
               8.8,  8.85, 8.9,  8.95, 9. /

  data f_94 / 4.25022959d-37, 4.35880298d-36, 3.57054296d-35, 2.18175426d-34, & 
              8.97592571d-34, 2.68512961d-33, 7.49559346d-33, 2.11603751d-32, &
              5.39752853d-32, 1.02935904d-31, 1.33822307d-31, 1.40884290d-31, &
              1.54933156d-31, 2.07543102d-31, 3.42026227d-31, 6.31171444d-31, &
              1.16559416d-30, 1.95360497d-30, 2.77818735d-30, 3.43552578d-30, &
              4.04061803d-30, 4.75470982d-30, 5.65553769d-30, 6.70595782d-30, &
              7.80680354d-30, 8.93247715d-30, 1.02618156d-29, 1.25979030d-29, &
              1.88526483d-29, 3.62448572d-29, 7.50553279d-29, 1.42337571d-28, &
              2.37912813d-28, 3.55232305d-28, 4.84985757d-28, 6.20662827d-28, &
              7.66193687d-28, 9.30403645d-28, 1.10519802d-27, 1.25786927d-27, &
              1.34362634d-27, 1.33185242d-27, 1.22302081d-27, 1.05677973d-27, &
              9.23064720d-28, 8.78570994d-28, 8.02397416d-28, 5.87681142d-28, &
              3.82272695d-28, 3.11492649d-28, 3.85736090d-28, 5.98893519d-28, &
              9.57553548d-28, 1.46650267d-27, 2.10365847d-27, 2.79406671d-27, &
              3.39420087d-27, 3.71077520d-27, 3.57296767d-27, 2.95114380d-27, &
              2.02913103d-27, 1.13361825d-27, 5.13405629d-28, 2.01305089d-28, &
              8.15781482d-29, 4.28366817d-29, 3.08701543d-29, 2.68693906d-29, &
              2.51764203d-29, 2.41773103d-29, 2.33996083d-29, 2.26997246d-29, &
              2.20316143d-29, 2.13810001d-29, 2.07424438d-29, 2.01149189d-29, &
              1.94980213d-29, 1.88917920d-29, 1.82963583d-29, 1.77116920d-29, &
              1.71374392d-29, 1.65740593d-29, 1.60214447d-29, 1.54803205d-29, &
              1.49510777d-29, 1.44346818d-29, 1.39322305d-29, 1.34441897d-29, &
              1.29713709d-29, 1.25132618d-29, 1.20686068d-29, 1.14226584d-29, &
              1.09866413d-29, 1.05635524d-29, 1.01532444d-29, 9.75577134d-30, &
              9.37102736d-30, 8.99873335d-30, 8.63860172d-30, 8.29051944d-30, &
              7.95414793d-30 /

  data f_131 / 3.18403601d-37,   3.22254703d-36,   2.61657920d-35, &
               1.59575286d-34,   6.65779556d-34,   2.07015132d-33, &
               6.05768615d-33,   1.76074833d-32,   4.52633001d-32, &
               8.57121883d-32,   1.09184271d-31,   1.10207963d-31, &
               1.11371658d-31,   1.29105226d-31,   1.80385897d-31, &
               3.27295431d-31,   8.92002136d-31,   3.15214579d-30, &
               9.73440787d-30,   2.22709702d-29,   4.01788984d-29, &
               6.27471832d-29,   8.91764995d-29,   1.18725647d-28, &
               1.52888040d-28,   2.05082946d-28,   3.47651873d-28, &
               8.80482184d-28,   2.66533063d-27,   7.05805149d-27, &
               1.46072515d-26,   2.45282476d-26,   3.55303726d-26, &
               4.59075911d-26,   5.36503515d-26,   5.68444094d-26, &
               5.47222296d-26,   4.81119761d-26,   3.85959059d-26, &
               2.80383406d-26,   1.83977650d-26,   1.11182849d-26, &
               6.50748885d-27,   3.96843481d-27,   2.61876319d-27, &
               1.85525324d-27,   1.39717024d-27,   1.11504283d-27, &
               9.38169611d-28,   8.24801234d-28,   7.43331919d-28, &
               6.74537063d-28,   6.14495760d-28,   5.70805277d-28, &
               5.61219786d-28,   6.31981777d-28,   9.19747307d-28, &
               1.76795732d-27,   3.77985446d-27,   7.43166191d-27, &
               1.19785603d-26,   1.48234676d-26,   1.36673114d-26, &
               9.61047146d-27,   5.61209353d-27,   3.04779780d-27, &
               1.69378976d-27,   1.02113491d-27,   6.82223774d-28, &
               5.02099099d-28,   3.99377760d-28,   3.36279037d-28, &
               2.94767378d-28,   2.65740865d-28,   2.44396277d-28, &
               2.28003967d-28,   2.14941419d-28,   2.04178995d-28, &
               1.95031045d-28,   1.87011994d-28,   1.79777869d-28, &
               1.73093957d-28,   1.66795789d-28,   1.60785455d-28, &
               1.55002399d-28,   1.49418229d-28,   1.44022426d-28, &
               1.38807103d-28,   1.33772767d-28,   1.28908404d-28, &
               1.24196208d-28,   1.17437501d-28,   1.12854330d-28, &
               1.08410498d-28,   1.04112003d-28,   9.99529904d-29, &
               9.59358806d-29,   9.20512291d-29,   8.83009123d-29, &
               8.46817043d-29,   8.11921928d-29 /

  data f_171 / 2.98015581d-42, 1.24696230d-40, 3.37614652d-39, 5.64103034d-38, &
               5.20550266d-37, 2.77785939d-36, 1.16283616d-35, 6.50007689d-35, &
               9.96177399d-34, 1.89586076d-32, 2.10982799d-31, 1.36946479d-30, &
               6.27396553d-30, 2.29955134d-29, 7.13430211d-29, 1.91024282d-28, &
               4.35358848d-28, 7.94807808d-28, 1.07431875d-27, 1.08399488d-27, &
               9.16212938d-28, 7.34715770d-28, 6.59246382d-28, 9.13541375d-28, &
               2.05939035d-27, 5.08206555d-27, 1.10148083d-26, 2.01884662d-26, &
               3.13578384d-26, 4.14367719d-26, 5.36067711d-26, 8.74170213d-26, &
               1.64161233d-25, 2.94587860d-25, 4.76298332d-25, 6.91765639d-25, &
               9.08825111d-25, 1.08496183d-24, 1.17440114d-24, 1.13943939d-24, &
               9.71696981d-25, 7.09593688d-25, 4.31376399d-25, 2.12708486d-25, &
               8.47429567d-26, 3.17608104d-26, 1.95898842d-26, 1.98064242d-26, &
               1.67706555d-26, 8.99126003d-27, 3.29773878d-27, 1.28896127d-27, &
               8.51169698d-28, 7.53520167d-28, 6.18268143d-28, 4.30034650d-28, &
               2.78152409d-28, 1.95437088d-28, 1.65896278d-28, 1.68740181d-28, &
               1.76054383d-28, 1.63978419d-28, 1.32880591d-28, 1.00833205d-28, &
               7.82252806d-29, 6.36181741d-29, 5.34633869d-29, 4.58013864d-29, &
               3.97833422d-29, 3.49414760d-29, 3.09790940d-29, 2.76786227d-29, &
               2.48806269d-29, 2.24823367d-29, 2.04016653d-29, 1.85977413d-29, &
               1.70367499d-29, 1.56966125d-29, 1.45570643d-29, 1.35964565d-29, &
               1.27879263d-29, 1.21016980d-29, 1.15132499d-29, 1.09959628d-29, &
               1.05307482d-29, 1.01040261d-29, 9.70657096d-30, 9.33214234d-30, &
               8.97689427d-30, 8.63761192d-30, 8.31149879d-30, 7.85162401d-30, &
               7.53828281d-30, 7.23559452d-30, 6.94341530d-30, 6.66137038d-30, &
               6.38929156d-30, 6.12669083d-30, 5.87346434d-30, 5.62943622d-30, & 
               5.39435202d-30 /

  data f_193 / 6.40066486d-32, 4.92737300d-31, 2.95342934d-30, 1.28061594d-29, & 
               3.47747667d-29, 5.88554792d-29, 7.72171179d-29, 9.75609282d-29, &
               1.34318963d-28, 1.96252638d-28, 2.70163878d-28, 3.63192965d-28, &
               5.28087341d-28, 8.37821446d-28, 1.39089159d-27, 2.31749718d-27, &
               3.77510689d-27, 5.85198594d-27, 8.26021568d-27, 1.04870405d-26, &
               1.25209374d-26, 1.47406787d-26, 1.77174067d-26, 2.24098537d-26, &
               3.05926105d-26, 4.50018853d-26, 6.84720216d-26, 1.00595861d-25, &
               1.30759222d-25, 1.36481773d-25, 1.15943558d-25, 1.01467304d-25, &
               1.04092532d-25, 1.15071251d-25, 1.27416033d-25, 1.38463476d-25, &
               1.47882726d-25, 1.57041238d-25, 1.69786224d-25, 1.94970397d-25, &
               2.50332918d-25, 3.58321431d-25, 5.18061550d-25, 6.60405549d-25, &
               6.64085365d-25, 4.83825816d-25, 2.40545020d-25, 8.59534098d-26, &
               2.90920638d-26, 1.33204845d-26, 9.03933926d-27, 7.78910836d-27, &
               7.29342321d-27, 7.40267022d-27, 8.05279981d-27, 8.13829291d-27, &
               6.92634262d-27, 5.12521880d-27, 3.59527615d-27, 2.69617560d-27, &
               2.84432713d-27, 5.06697306d-27, 1.01281903d-26, 1.63526978d-26, &
               2.06759342d-26, 2.19482312d-26, 2.10050611d-26, 1.89837248d-26, &
               1.66347131d-26, 1.43071097d-26, 1.21518419d-26, 1.02078343d-26, &
               8.46936184d-27, 6.93015742d-27, 5.56973237d-27, 4.38951754d-27, &
               3.38456457d-27, 2.55309556d-27, 1.88904224d-27, 1.38057546d-27, &
               1.00718330d-27, 7.43581116d-28, 5.63562931d-28, 4.43359435d-28, &
               3.63923535d-28, 3.11248143d-28, 2.75586846d-28, 2.50672237d-28, &
               2.32419348d-28, 2.18325682d-28, 2.06834486d-28, 1.93497044d-28, &
               1.84540751d-28, 1.76356504d-28, 1.68741425d-28, 1.61566157d-28, &
               1.54754523d-28, 1.48249410d-28, 1.42020176d-28, 1.36045230d-28, &
               1.30307965d-28 /

  data f_211 / 4.74439912d-42, 1.95251522d-40, 5.19700194d-39, 8.53120166d-38, &
               7.72745727d-37, 4.04158559d-36, 1.64853511d-35, 8.56295439d-35, &
               1.17529722d-33, 2.16867729d-32, 2.40472264d-31, 1.56418133d-30, &
               7.20032889d-30, 2.65838271d-29, 8.33196904d-29, 2.26128236d-28, &
               5.24295811d-28, 9.77791121d-28, 1.35913489d-27, 1.43957785d-27, &
               1.37591544d-27, 1.49029886d-27, 2.06183401d-27, 3.31440622d-27, &
               5.42497318d-27, 8.41100374d-27, 1.17941366d-26, 1.49269794d-26, &
               1.71506074d-26, 1.71266353d-26, 1.51434781d-26, 1.36766622d-26, &
               1.33483562d-26, 1.36834518d-26, 1.45829002d-26, 1.62575306d-26, &
               1.88773347d-26, 2.22026986d-26, 2.54930499d-26, 2.80758138d-26, &
               3.06176409d-26, 3.62799792d-26, 5.13226109d-26, 8.46260744d-26, &
               1.38486586d-25, 1.86192535d-25, 1.78007934d-25, 1.16548409d-25, &
               5.89293257d-26, 2.69952884d-26, 1.24891081d-26, 6.41273176d-27, &
               4.08282914d-27, 3.26463328d-27, 2.76230280d-27, 2.08986882d-27, &
               1.37658470d-27, 8.48489381d-28, 5.19304217d-28, 3.19312514d-28, &
               2.02968197d-28, 1.50171666d-28, 1.39164218d-28, 1.42448821d-28, &
               1.41714519d-28, 1.33341059d-28, 1.20759270d-28, 1.07259692d-28, &
               9.44895400d-29, 8.29030041d-29, 7.25440631d-29, 6.33479483d-29, &
               5.51563757d-29, 4.79002469d-29, 4.14990482d-29, 3.59384972d-29, &
               3.12010860d-29, 2.72624742d-29, 2.40734791d-29, 2.15543565d-29, &
               1.95921688d-29, 1.80682882d-29, 1.68695662d-29, 1.59020936d-29, &
               1.50940886d-29, 1.43956179d-29, 1.37731622d-29, 1.32049043d-29, &
               1.26771875d-29, 1.21803879d-29, 1.17074716d-29, 1.10507836d-29, &
               1.06022834d-29, 1.01703080d-29, 9.75436986d-30, 9.35349257d-30, &
               8.96744546d-30, 8.59527489d-30, 8.23678940d-30, 7.89144480d-30, & 
               7.55891138d-30 /

  data f_304 / 3.62695850d-32, 2.79969087d-31, 1.68340584d-30, 7.32681440d-30, &
               1.99967770d-29, 3.41296785d-29, 4.55409104d-29, 5.94994635d-29, &
               8.59864963d-29, 1.39787633d-28, 3.17701965d-28, 1.14474920d-27, &
               4.44845958d-27, 1.54785841d-26, 4.70265345d-26, 1.24524365d-25, &
               2.81535352d-25, 5.10093666d-25, 6.83545307d-25, 6.82110329d-25, &
               5.66886188d-25, 4.36205513d-25, 3.29265688d-25, 2.49802368d-25, &
               1.92527113d-25, 1.51058572d-25, 1.20596047d-25, 9.76884267d-26, &
               7.89979266d-26, 6.18224289d-26, 4.67298332d-26, 3.57934505d-26, &
               2.84535785d-26, 2.32853022d-26, 1.95228514d-26, 1.67880071d-26, &
               1.47608785d-26, 1.32199691d-26, 1.20070960d-26, 1.09378177d-26, &
               1.00031730d-26, 9.62434001d-27, 1.05063954d-26, 1.27267143d-26, &
               1.45923057d-26, 1.36746707d-26, 1.03466970d-26, 6.97647829d-27, &
               4.63141039d-27, 3.19031994d-27, 2.33373613d-27, 1.81589079d-27, &
               1.48446917d-27, 1.26611478d-27, 1.12617468d-27, 1.03625148d-27, &
               9.61400595d-28, 8.79016231d-28, 7.82612130d-28, 6.73762960d-28, &
               5.59717956d-28, 4.53010243d-28, 3.65712196d-28, 3.00958686d-28, &
               2.54011502d-28, 2.18102277d-28, 1.88736437d-28, 1.63817539d-28, &
               1.42283147d-28, 1.23631916d-28, 1.07526003d-28, 9.36797928d-29, &
               8.18565660d-29, 7.18152734d-29, 6.32523238d-29, 5.59513985d-29, &
               4.96614048d-29, 4.42518826d-29, 3.95487628d-29, 3.54690294d-29, &
               3.18953930d-29, 2.87720933d-29, 2.60186750d-29, 2.36011522d-29, &
               2.14717806d-29, 1.95905217d-29, 1.79287981d-29, 1.64562262d-29, &
               1.51489425d-29, 1.39876064d-29, 1.29496850d-29, 1.18665438d-29, &
               1.10240474d-29, 1.02643099d-29, 9.57780996d-30, 8.95465151d-30, &
               8.38950190d-30, 7.87283711d-30, 7.40136507d-30, 6.96804279d-30, & 
               6.56945323d-30 /

  data f_335 / 2.46882661d-32, 1.89476632d-31, 1.13216502d-30, 4.89532008d-30, & 
               1.32745970d-29, 2.25390335d-29, 3.00511672d-29, 3.96035934d-29, &
               5.77977656d-29, 8.58600736d-29, 1.14083000d-28, 1.48644411d-28, &
               2.15788823d-28, 3.51628877d-28, 6.12200698d-28, 1.08184987d-27, &
               1.85590697d-27, 2.91679107d-27, 3.94405396d-27, 4.63610680d-27, &
               5.13824456d-27, 5.66602209d-27, 6.30009232d-27, 7.03422868d-27, &
               7.77973918d-27, 8.32371831d-27, 8.56724316d-27, 8.62601374d-27, &
               8.13308844d-27, 6.53188216d-27, 4.55197029d-27, 3.57590087d-27, &
               3.59571707d-27, 4.03502770d-27, 4.54366411d-27, 4.96914990d-27, &
               5.24601170d-27, 5.39979250d-27, 5.43023669d-27, 5.26235042d-27, &
               4.91585495d-27, 4.52628362d-27, 4.13385020d-27, 3.67538967d-27, &
               3.39939742d-27, 3.81284533d-27, 5.02332701d-27, 6.19438602d-27, &
               6.49613071d-27, 6.04010475d-27, 5.24664275d-27, 4.37225997d-27, &
               3.52957182d-27, 2.76212276d-27, 2.08473158d-27, 1.50850518d-27, &
               1.04602472d-27, 7.13091243d-28, 5.34289645d-28, 5.21079581d-28, &
               6.22246365d-28, 6.99555864d-28, 6.29665489d-28, 4.45077026d-28, &
               2.67046793d-28, 1.52774686d-28, 9.18061770d-29, 6.09116074d-29, &
               4.48562572d-29, 3.59463696d-29, 3.05820218d-29, 2.70766652d-29, &
               2.46144034d-29, 2.27758450d-29, 2.13331183d-29, 2.01537836d-29, &
               1.91566180d-29, 1.82893912d-29, 1.75167748d-29, 1.68136168d-29, &
               1.61615595d-29, 1.55481846d-29, 1.49643236d-29, 1.44046656d-29, &
               1.38657085d-29, 1.33459068d-29, 1.28447380d-29, 1.23615682d-29, &
               1.18963296d-29, 1.14478976d-29, 1.10146637d-29, 1.04039479d-29, &
               9.98611410d-30, 9.58205147d-30, 9.19202009d-30, 8.81551313d-30, &
               8.45252127d-30, 8.10224764d-30, 7.76469090d-30, 7.43954323d-30, &
               7.12653873d-30 /

  data f_1354 / 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 0.0000000d+00, &
                0.0000000d+00, 0.0000000d+00, 0.0000000d+00, 2.8306229d-43, &
                6.2249742d-40, 5.2502353d-37, 1.5532066d-34, 1.6648678d-32, &
                7.8517756d-31, 2.0530806d-29, 3.4992089d-28, 4.2820552d-27, &
                3.9942179d-26, 2.9558137d-25, 1.7773391d-24, 8.8169698d-24, &
                3.6290640d-23, 1.2338631d-22, 3.4156004d-22, 7.5194933d-22, &
                1.2748505d-21, 1.6059518d-21, 1.4685663d-21, 9.9275103d-22, &
                5.3269078d-22, 2.4902077d-22, 1.0922949d-22, 4.7030177d-23, &
                2.0328035d-23, 8.9087640d-24, 3.9651675d-24, 1.7899798d-24, &
                8.1571408d-25, 3.7315855d-25, 1.7037092d-25, 7.7065973d-26, &
                3.4425015d-26, 1.5093498d-26, 6.4718403d-27, 2.7138098d-27, &
                1.1132269d-27, 4.4855265d-28, 1.7830170d-28, 7.0251280d-29, &
                2.7573307d-29, 1.0824557d-29, 4.2623914d-30, 1.6892384d-30, &
                6.7457206d-31, 2.7204369d-31, 1.1077821d-31, 4.5605646d-32, &
                1.8963764d-32, 7.9683214d-33, 3.3808639d-33, 1.4484216d-33, &
                6.2624282d-34, 2.7303008d-34, 1.1997758d-34, 5.3099278d-35, &
                2.3657412d-35 /


  data n_iris / 41 /

  data t_iris / 4.        , 4.1       , 4.2       , 4.3       , 4.40000001, & 
                4.50000001, 4.60000001, 4.70000001, 4.80000001, 4.90000001, & 
                5.00000001, 5.10000002, 5.20000002, 5.30000002, 5.40000002, & 
                5.50000002, 5.60000002, 5.70000003, 5.80000003, 5.90000003, & 
                6.00000003, 6.10000003, 6.20000003, 6.30000003, 6.40000004, & 
                6.50000004, 6.60000004, 6.70000004, 6.80000004, 6.90000004, &
                7.00000004, 7.10000005, 7.20000005, 7.30000005, 7.40000005, & 
                7.50000005, 7.60000005, 7.70000006, 7.80000006, 7.90000006, & 
                8.00000006 /

  data f_1394 / 0.00000000d+00, 1.93533655d-40, 7.15981215d-36, 2.04686128d-32, &
                5.72640405d-30, 3.23092896d-28, 6.85244696d-27, 7.55682283d-26, &
                4.67101473d-25, 9.55142072d-25, 4.33380741d-25, 1.45387404d-25, &
                5.81942295d-26, 3.07693806d-26, 2.01894530d-26, 1.18998796d-26, &
                4.49471491d-27, 9.76143303d-28, 1.29855510d-28, 1.11544509d-29, &
                6.23585371d-31, 2.22202348d-32, 4.31947134d-34, 3.48537142d-36, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1403 / 0.00000000d+00, 1.01832266d-40, 3.72640318d-36, 1.05607441d-32, &
                2.93403467d-30, 1.64622059d-28, 3.47584665d-27, 3.81938141d-26, &
                2.35407492d-25, 4.80282085d-25, 2.17539597d-25, 7.28815298d-26, &
                2.91432216d-26, 1.53976673d-26, 1.00977912d-26, 5.94944552d-27, &
                2.24652900d-27, 4.87783688d-28, 6.48775540d-29, 5.57200542d-30, &
                3.11455903d-31, 1.10968031d-32, 2.15695927d-34, 1.74034756d-36, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1338 / 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                5.59703085d-44, 5.47525395d-39, 3.07170716d-35, 1.75094037d-32, &
                1.63610834d-30, 4.14452085d-29, 3.85033136d-28, 1.42858725d-27, &
                2.46996740d-27, 2.26046588d-27, 1.11629672d-27, 1.89954890d-28, &
                1.25432742d-29, 8.43309728d-31, 7.46271327d-32, 8.88970918d-33, &
                1.45429938d-33, 3.22420807d-34, 8.23981786d-35, 1.91819327d-35, &
                3.38071036d-36, 4.41752604d-37, 5.10135232d-38, 6.09012693d-39, &
                7.95438805d-40, 1.13228114d-40, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1343 / 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                1.08271681d-43, 1.05949255d-38, 5.94819205d-35, 3.39744329d-32, &
                3.18273115d-30, 8.07614028d-29, 7.51056131d-28, 2.78967626d-27, &
                4.82884250d-27, 4.42336475d-27, 2.18477883d-27, 3.71675045d-28, &
                2.45261933d-29, 1.64744066d-30, 1.45644306d-31, 1.73324716d-32, &
                2.83312322d-33, 6.27677953d-34, 1.60323617d-34, 3.73066904d-35, &
                6.57279875d-36, 8.58607949d-37, 9.91269460d-38, 1.18313870d-38, &
                1.54500690d-39, 2.19888719d-40, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1397 / 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                4.34836004d-39, 4.96426171d-35, 5.05760892d-32, 7.50295255d-30, &
                2.40254580d-28, 2.56102568d-27, 1.18296949d-26, 2.51995178d-26, &
                2.81613382d-26, 1.82076107d-26, 6.79263935d-27, 9.21054630d-28, &
                5.05581190d-29, 2.92195181d-30, 2.27430754d-31, 2.41469773d-32, &
                3.54721568d-33, 7.09608467d-34, 1.64318504d-34, 3.48183668d-35, &
                5.61266273d-36, 6.73902907d-37, 7.18283028d-38, 7.94870608d-39, &
                9.66351240d-40, 1.28547309d-40, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1400 / 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                1.18177684d-38, 1.32357800d-34, 1.32594042d-31, 1.93412102d-29, &
                6.08566478d-28, 6.38519503d-27, 2.91279887d-26, 6.14925983d-26, &
                6.81469149d-26, 4.36778608d-26, 1.61396980d-26, 2.16662723d-27, &
                1.17812734d-28, 6.74629466d-30, 5.20391081d-31, 5.47815214d-32, &
                7.98487080d-33, 1.58648584d-33, 3.65265925d-34, 7.69992787d-35, &
                1.23533009d-35, 1.47682399d-36, 1.56786975d-37, 1.72878585d-38, &
                2.09478339d-39, 2.77804735d-40, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1401 / 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                6.42974220d-38, 7.29646385d-34, 7.39513422d-31, 1.09062434d-28, &
                3.47019351d-27, 3.67576403d-26, 1.68774764d-25, 3.58044703d-25, &
                3.99578132d-25, 2.58575560d-25, 9.66241099d-26, 1.31260070d-26, &
                7.22460537d-28, 4.19238792d-29, 3.28179891d-30, 3.51001129d-31, &
                5.20153456d-32, 1.05069228d-32, 2.45761590d-33, 5.25880927d-34, &
                8.55348853d-35, 1.03532674d-35, 1.11146250d-36, 1.23776496d-37, &
                1.51308003d-38, 2.02228439d-39, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1405 / 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                3.34149090d-38, 3.81477964d-34, 3.88651216d-31, 5.76563288d-29, &
                1.84623280d-27, 1.96801643d-26, 9.09051189d-26, 1.93645346d-25, &
                2.16405473d-25, 1.39916266d-25, 5.21980650d-26, 7.07786506d-27, &
                3.88516429d-28, 2.24540000d-29, 1.74772309d-30, 1.85562180d-31, &
                2.72595021d-32, 5.45321888d-33, 1.26277048d-33, 2.67577720d-34, &
                4.31334068d-35, 5.17898894d-36, 5.52008339d-37, 6.10869422d-38, &
                7.42657248d-39, 9.87910170d-40, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1349 / 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 9.85494094d-39, &
                2.34992740d-35, 1.00061749d-32, 1.14282258d-30, 4.54749253d-29, &
                6.94382350d-28, 3.76191229d-27, 5.97678720d-27, 2.05294162d-27, &
                1.52103599d-28, 6.99132213d-30, 3.64304655d-31, 2.21740605d-32, &
                1.40590849d-33, 7.57992378d-35, 2.58055152d-36, 3.91187145d-38, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00 /

  data f_1351 / 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 0.00000000d+00, &
                0.00000000d+00, 0.00000000d+00, 0.00000000d+00, 1.09503647d-39, &
                5.47214550d-36, 2.42433983d-33, 2.75295034d-31, 1.21929718d-29, &
                2.48392125d-28, 2.33268145d-27, 8.68623633d-27, 1.00166284d-26, &
                3.63126633d-27, 7.45174807d-28, 1.38224064d-28, 2.69270994d-29, &
                5.53314977d-30, 1.15313092d-30, 2.34195788d-31, 4.48242942d-32, &
                7.94976380d-33 /

  contains

    subroutine get_line_info(ion,charge,mass,logTe,line_center,spatial_rsl,spectral_rsl)
      ! get information of the spectral line
      use mod_global_parameters

      integer :: mass
      character(len=30) :: ion,charge
      double precision :: logTe
      double precision :: line_center
      double precision :: spatial_rsl,spectral_rsl

      select case(wavelength)
        case(304)
          ion='He'
          charge='II'
          mass=4
          logTe=4.7
          line_center=303.8
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(171)
          ion='Fe'
          charge='IX'
          mass=56
          logTe=5.8
          line_center=171.1
          spatial_rsl=0.6
          spectral_rsl=0.2 
 
        case(193)
          ion='Fe'
          charge='XXIV'
          mass=56
          logTe=7.3
          line_center=193.5
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(211)
          ion='Fe'
          charge='XIV'
          mass=56
          logTe=6.3
          line_center=211.3
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(335)
          ion='Fe'
          charge='XVI'
          mass=56
          logTe=6.4
          line_center=335.4
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(94)
          ion='Fe'
          charge='XVIII'
          mass=56
          logTe=6.8
          line_center=93.9
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(131)
          ion='Fe'
          charge='XXI'
          mass=56
          logTe=7.0
          line_center=131.0
          spatial_rsl=0.6
          spectral_rsl=0.2

        case(1354)
          ion='Fe'
          charge='XXI'
          mass=56
          logTe=7.0
          line_center=1354.1
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1394)
          ion='Si'
          charge='IV'
          mass=28
          logTe=4.8
          line_center=1393.8
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1403)
          ion='Si'
          charge='IV'
          mass=28
          logTe=4.8
          line_center=1402.8
          spatial_rsl=0.33
          spectral_rsl=0.026
  
        case(1338)
          ion='O'
          charge='IV'
          mass=16
          logTe=0.0
          line_center=1338.5
          spatial_rsl=0.33
          spectral_rsl=0.026
 
        case(1343)
          ion='O'
          charge='IV'
          mass=16
          logTe=0.0
          line_center=1343.0
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1397)
          ion='O'
          charge='IV'
          mass=16
          logTe=0.0
          line_center=1397.2
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1400)
          ion='O'
          charge='IV'
          mass=16
          logTe=5.2
          line_center=1399.8
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1401)
          ion='O'
          charge='IV'
          mass=16
          logTe=5.2
          line_center=1401.2
          spatial_rsl=0.33
          spectral_rsl=0.026

        case(1405)
          ion='O'
          charge='IV'
          mass=16
          logTe=0.0
          line_center=1404.8
          spatial_rsl=0.33
          spectral_rsl=0.026
  
        case(1349)
          ion='Fe'
          charge='XII'
          mass=56
          logTe=6.2
          line_center=1349.2
          spatial_rsl=0.33
          spectral_rsl=0.026
  
        case(1351)
          ion='Fe'
          charge='XXI'
          mass=56
          logTe=7.0
          line_center=1354.1
          spatial_rsl=0.33
          spectral_rsl=0.026

        case default
          call mpistop("No information about this line")

      end select

    end subroutine get_line_info
    
    subroutine get_EUV(wl,ixI^L,ixO^L,w,x,flux)
      ! calculate the local emission intensity of given EUV line
      ! wavelength is the wave length of the emission line
      ! unit [DN cm^-5 s^-1]
      use mod_global_parameters

      integer :: wl
      integer, intent(in) :: ixI^L, ixO^L
      double precision, intent(in) :: x(ixI^S,1:ndim)
      double precision :: w(ixI^S,1:nw)
      double precision :: flux(ixI^S)

      integer :: n_table
      double precision, allocatable :: t_table(:),f_table(:)

      integer :: ix^D,iTt
      double precision :: pth(ixI^S),Te(ixI^S),Ne(ixI^S)
      double precision :: logT,logGT

      ! selecting emission table 
      select case(wl)

      case(94)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_94(1:n_aia)

      case(131)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_131(1:n_aia)

      case(171)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_171(1:n_aia)

      case(193)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_193(1:n_aia)

      case(211)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_211(1:n_aia)

      case(304)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_304(1:n_aia)

      case(335)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_335(1:n_aia)

      case(1354)
        n_table=n_aia
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_aia)
        f_table(1:n_table)=f_1354(1:n_aia)

      case(1394)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1394(1:n_iris)

      case(1403)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1403(1:n_iris)

      case(1338)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1338(1:n_iris)

      case(1343)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1343(1:n_iris)

      case(1397)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1397(1:n_iris)

      case(1400)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1400(1:n_iris)

      case(1401)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1401(1:n_iris)

      case(1405)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1405(1:n_iris)

      case(1349)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1349(1:n_iris)

      case(1351)
        n_table=n_iris
        allocate(t_table(1:n_table))
        allocate(f_table(1:n_table))
        t_table(1:n_table)=t_aia(1:n_iris)
        f_table(1:n_table)=f_1351(1:n_iris)

      case default
        call mpistop("This wavelength is unknown")

      end select


      call phys_get_pthermal(w,x,ixI^L,ixO^L,pth)
      Te(ixO^S)=pth(ixO^S)/w(ixO^S,iw_rho)*unit_temperature
      Ne(ixO^S)=w(ixO^S,iw_rho)*unit_numberdensity
      flux(ixO^S)=Ne(ixO^S)**2

      {do ix^DB=ixOmin^DB,ixOmax^DB\}
        logT=log10(Te(ix^D))
        if (logT>=t_table(1) .and. logT<=t_table(n_table)) then
          do iTt=1,n_table-1
            if (logT>=t_table(iTt) .and. logT<t_table(iTt+1)) then
              logGT=log10(f_table(iTt))*(logT-t_table(iTt+1))/(t_table(iTt)-t_table(iTt+1))+&
                    log10(f_table(iTt+1))*(logT-t_table(iTt))/(t_table(iTt+1)-t_table(iTt))
            endif
          enddo
          flux(ix^D)=flux(ix^D)*(10**(logGT))
        else
          flux(ix^D)=0.0d0
        endif
      {enddo\}

      deallocate(t_table,f_table)

    end subroutine get_EUV

    subroutine get_SXR(ixI^L,ixO^L,w,x,flux,El,Eu)
      !synthesize thermal SXR from El keV to Eu keV
      use mod_global_parameters

      integer, intent(in)          :: ixI^L,ixO^L
      double precision, intent(in) :: x(ixI^S,1:ndim)
      double precision             :: w(ixI^S,nw)
      double precision             :: flux(ixI^S)
      integer                      :: El,Eu

      integer :: ix^D,ixO^D

      integer :: iE,numE
      double precision :: I0,kb,keV,dE,Ei
      double precision :: pth(ixI^S),Te(ixI^S),kbT(ixI^S)
      double precision :: Ne(ixI^S),gff(ixI^S),fi(ixI^S)
      double precision :: EM(ixI^S)

      !I0=1.07d-42    
      I0=3.01d-15
      kb=1.38d-23
      keV=1.602d-16

      dE=0.1
      numE=floor((Eu-El)/dE)

      call phys_get_pthermal(w,x,ixI^L,ixO^L,pth)
      Te(ixO^S)=pth(ixO^S)/w(ixO^S,iw_rho)*unit_temperature
      Ne(ixO^S)=w(ixO^S,iw_rho)*unit_numberdensity
      kbT(ixO^S)=kb*Te(ixO^S)/keV
      flux(ixO^S)=0.0d0
      EM(ixO^S)=(I0*(Ne(ixO^S))**2)

      do iE=0,numE-1
        Ei=dE*iE+El
        gff(ixO^S)=1
        {do ix^DB=ixOmin^DB,ixOmax^DB\}
          if (kbT(ix^D)<Ei) then
            gff(ix^D)=(kbT(ix^D)/Ei)**0.4
          endif
        {enddo\}
        fi(ixO^S)=(EM(ixO^S)*gff(ixO^S))* &
                  exp(-Ei/(kbT(ixO^S)))/(Ei*sqrt(kbT(ixO^S)))
        flux(ixO^S)=flux(ixO^S)+fi(ixO^S)*dE
      enddo

    end subroutine get_SXR


  {^IFTHREED
    subroutine get_EUV_image(qunit)
      ! integrate emission flux along line of sight (LOS) 
      ! in a 3D simulation box and get a 2D EUV image

      use mod_global_parameters

      integer, intent(in) :: qunit

      double precision :: dx^D
      integer :: numX^D,ix^D
      double precision, allocatable :: xI(:,:,:),EUV(:,:),EUVs(:,:)
      double precision, allocatable :: Dpl(:,:),Dpls(:,:),wI(:,:,:)
      double precision :: dxI^D
      integer :: numXI1,numXI2,numSI,numWI
      double precision :: xI^L

      integer :: iigrid,igrid,j

      double precision, allocatable :: xO(:,:,:),wO(:,:,:)
      double precision :: dxO,rx1,rx2,area,sumEUV,sumDpl
      integer :: numXO1,numXO2,numWO
      double precision :: xOc^L,xc^L
      integer :: ixO1,ixO2,ix^L

      integer :: mass
      double precision :: logTe
      character (30) :: ion,charge
      double precision :: lineCent
      double precision :: spaceRsl,wlRsl

      double precision :: unitv,arcsec
      character(20) :: datatype

      datatype='image'

      unitv=unit_velocity/1.0e5  ! km/s
      arcsec=7.0d7/unit_length


      ! prepare for integration based on LOS direction
      {dx^D=dx(^D,refine_max_level) \}
      {numX^D=floor((xprobmax^D-xprobmin^D)/dx^D) \}

      select case(direction_LOS)

      case (1)
        dxI1=dx2
        dxI2=dx3
        numXI1=numX2
        numXI2=numX3
        xImin1=xprobmin2
        xImax1=xprobmax2
        xImin2=xprobmin3
        xImax2=xprobmax3

      case (2)
        dxI1=dx3
        dxI2=dx1
        numXI1=numX3
        numXI2=numX1
        xImin1=xprobmin3
        xImax1=xprobmax3
        xImin2=xprobmin1
        xImax2=xprobmax1
        
      case (3)
        dxI1=dx1
        dxI2=dx2
        numXI1=numX1
        numXI2=numX2
        xImin1=xprobmin1
        xImax1=xprobmax1
        xImin2=xprobmin2
        xImax2=xprobmax2

      end select


      numWI=2

      ! initialize image
      allocate(xI(numXI1,numXI2,2),wI(numXI1,numXI2,numWI))
      allocate(EUVs(numXI1,numXI2),EUV(numXI1,numXI2))
      allocate(Dpl(numXI1,numXI2),Dpls(numXI1,numXI2))

      do ix1=1,numXI1
        do ix2=1,numXI2
          xI(ix1,ix2,1)=xImin1+dxI1*(ix1-0.5)
          xI(ix1,ix2,2)=xImin2+dxI2*(ix2-0.5)
        enddo
      enddo


      ! integrate flux and get cell center flux for image
      EUVs=0.0d0
      EUV=0.0d0     
      Dpl=0.d0
      Dpls=0.d0 
      do iigrid=1,igridstail; igrid=igrids(iigrid);
        call integrate_EUV(igrid,xI,EUVs,Dpls,numXI1,numXI2,dxI1,dxI2)
      enddo

      numSI=numXI1*numXI2
      call MPI_ALLREDUCE(EUVs,EUV,numSI,MPI_DOUBLE_PRECISION, &
                       MPI_SUM,icomm,ierrmpi)
      call MPI_ALLREDUCE(Dpls,Dpl,numSI,MPI_DOUBLE_PRECISION, &
                       MPI_SUM,icomm,ierrmpi)

      do ix1=1,numXI1
        do ix2=1,numXI2
          if (EUV(ix1,ix2)/=0) then
            Dpl(ix1,ix2)=-(Dpl(ix1,ix2)/EUV(ix1,ix2))*unitv
          else
            Dpl(ix1,ix2)=0.d0
          endif
          wI(ix1,ix2,1)=EUV(ix1,ix2)
          wI(ix1,ix2,2)=Dpl(ix1,ix2)
        enddo
      enddo


      ! change resolution
      call get_line_info(ion,charge,mass,logTe,lineCent,spaceRsl,wlRsl)
      dxO=spaceRsl*arcsec
      numXO1=floor((xImax1-xImin1)/2.d0/dxO)*2
      numXO2=floor((xImax2-xImin2)/2.d0/dxO)*2
      numWO=numWI

      allocate(xO(numXO1,numXO2,numWO),wO(numXO1,numXO2,numWO))        

      if (resolution_euv=='instrument') then     
        wO=0.d0
   
        ! new cells with observational resolution
        do ixO1=1,numXO1
          do ixO2=1,numXO2
            xO(ixO1,ixO2,1)=(ixO1-numXO1/2-0.5d0)*dxO+(xImax1+xImin1)/2.d0
            xO(ixO1,ixO2,2)=(ixO2-numXO2/2-0.5d0)*dxO+(xImax2+xImin2)/2.d0

            xOcmin1=xO(ixO1,ixO2,1)-0.5d0*dxO
            xOcmin2=xO(ixO1,ixO2,2)-0.5d0*dxO
            xOcmax1=xO(ixO1,ixO2,1)+0.5d0*dxO
            xOcmax2=xO(ixO1,ixO2,2)+0.5d0*dxO
            ixmin1=floor((xOcmin1-xImin1)/dxI1)+1
            ixmin2=floor((xOcmin2-xImin2)/dxI2)+1
            ixmax1=ceiling((xOcmax1-xImin1)/dxI1)
            ixmax2=ceiling((xOcmax2-xImin2)/dxI2)

            area=0.d0
            sumEUV=0.d0
            sumDpl=0.d0
            do ix1=ixmin1,ixmax1
              do ix2=ixmin2,ixmax2
                rx1=1.d0
                rx2=1.d0
                xcmin1=xI(ix1,ix2,1)-0.5d0*dxI1
                xcmin2=xI(ix1,ix2,2)-0.5d0*dxI2
                xcmax1=xI(ix1,ix2,1)+0.5d0*dxI1
                xcmax2=xI(ix1,ix2,2)+0.5d0*dxI2

                if (xcmin1<xOcmin1) rx1=1.d0-(xOcmin1-xcmin1)/dxI1
                if (xcmin2<xOcmin2) rx2=1.d0-(xOcmin2-xcmin2)/dxI2
                if (xcmax1>xOcmax1) rx1=1.d0-(xcmax1-xOcmax1)/dxI1
                if (xcmax2>xOcmax2) rx2=1.d0-(xcmax2-xOcmax2)/dxI2

                area=area+rx1*rx2
                sumEUV=sumEUV+EUV(ix1,ix2)*rx1*rx2
                sumDpl=sumDpl+Dpl(ix1,ix2)*EUV(ix1,ix2)*rx1*rx2
              enddo
            enddo
            if (area>0) then
              wO(ixO1,ixO2,1)=sumEUV/area
              wO(ixO1,ixO2,2)=sumDpl/sumEUV
            endif

          enddo
        enddo

      endif


      ! output data
      if (resolution_euv=='instrument') then     
        call output_data(qunit,xO,dxO,dxO,wO,numXO1,numXO2,numWO,datatype)
      else
        call output_data(qunit,xI,dxI1,dxI2,wI,numXI1,numXI2,numWI,datatype)
      endif


      deallocate(xO,wO,xI,wI)
      deallocate(EUV,EUVs,Dpl,Dpls)

    end subroutine get_EUV_image

    subroutine integrate_EUV(igrid,xI,EUV,Dpl,numXI1,numXI2,dxI1,dxI2)
      use mod_global_parameters
      use mod_usr_methods

      integer :: igrid,numXI1,numXI2
      double precision :: xI(numXI1,numXI2,2),EUV(numXI1,numXI2)
      double precision :: Dpl(numXI1,numXI2)
      double precision :: dxI1,dxI2

      integer :: ixO^L,ixO^D,ixI^L,ix^D,j
      double precision :: dxb^D,xb^L,xd^D
      double precision, allocatable :: flux(:^D&),v(:^D&)
      double precision :: EUVt,Fvt,xc^L

      integer :: ixP^L,ixP^D


      ^D&ixOmin^D=ixmlo^D\
      ^D&ixOmax^D=ixmhi^D\
      ^D&ixImin^D=ixglo^D\
      ^D&ixImax^D=ixghi^D\
      
      ^D&dxb^D=rnode(rpdx^D_,igrid)\
      ^D&xbmin^D=rnode(rpxmin^D_,igrid)\
      ^D&xbmax^D=rnode(rpxmax^D_,igrid)\

      allocate(flux(ixI^S),v(ixI^S))

      ! get local EUV flux and velocity
      call get_EUV(wavelength,ixI^L,ixO^L,ps(igrid)%w,ps(igrid)%x,flux)
      v(ixO^S)=ps(igrid)%w(ixO^S,iw_mom(direction_LOS))/ps(igrid)%w(ixO^S,iw_rho)

      ! integrate for different direction
      select case(direction_LOS)

      case(1)
        do ix2=ixOmin2,ixOmax2
          do ix3=ixOmin3,ixOmax3
            EUVt=0.d0
            Fvt=0.d0
            do ix1=ixOmin1,ixOmax1
              EUVt=EUVt+flux(ix^D)*dxb1*unit_length
              Fvt=Fvt+flux(ix^D)*dxb1*unit_length*v(ix^D)
            enddo

            ! boundaries of the column along LOS
            ix1=ixOmin1
            {xcmin^D=ps(igrid)%x(ix^DD,^D)-0.5d0*dxb^D\}
            {xcmax^D=ps(igrid)%x(ix^DD,^D)+0.5d0*dxb^D\}

            ! integrate flux inside this column
            ixPmin1=max(floor((xcmin2-xI(1,1,1))/dxI1)+1,1)
            ixPmax1=floor((xcmax2-xI(1,1,1))/dxI1)
            ixPmin2=max(floor((xcmin3-xI(1,1,2))/dxI2)+1,1)
            ixPmax2=floor((xcmax3-xI(1,1,2))/dxI2)

            EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+EUVt
            Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+Fvt
          enddo
        enddo


      case(2)
        do ix3=ixOmin3,ixOmax3
          do ix1=ixOmin1,ixOmax1
            EUVt=0.d0
            Fvt=0.d0
            do ix2=ixOmin2,ixOmax2
              EUVt=EUVt+flux(ix^D)*dxb2*unit_length
              Fvt=Fvt+flux(ix^D)*dxb2*unit_length*v(ix^D)
            enddo

            ! boundaries of the column along LOS
            ix2=ixOmin2
            {xcmin^D=ps(igrid)%x(ix^DD,^D)-0.5d0*dxb^D\}
            {xcmax^D=ps(igrid)%x(ix^DD,^D)+0.5d0*dxb^D\}

            ! integrate flux inside this column
            ixPmin1=max(floor((xcmin3-xI(1,1,1))/dxI1)+1,1)
            ixPmax1=floor((xcmax3-xI(1,1,1))/dxI1)
            ixPmin2=max(floor((xcmin1-xI(1,1,2))/dxI2)+1,1)
            ixPmax2=floor((xcmax1-xI(1,1,2))/dxI2)

            EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+EUVt
            Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+Fvt
          enddo
        enddo


      case(3)
        do ix1=ixOmin1,ixOmax1
          do ix2=ixOmin2,ixOmax2
            EUVt=0.d0
            Fvt=0.d0
            do ix3=ixOmin3,ixOmax3
              EUVt=EUVt+flux(ix^D)*(dxb3*unit_length)
              Fvt=Fvt+flux(ix^D)*dxb3*unit_length*v(ix^D)
            enddo

            ! boundaries of the column along LOS
            ix3=ixOmin3
            {xcmin^D=ps(igrid)%x(ix^DD,^D)-0.5d0*dxb^D\}
            {xcmax^D=ps(igrid)%x(ix^DD,^D)+0.5d0*dxb^D\}

            ! integrate flux inside this column
            ixPmin1=max(floor((xcmin1-xI(1,1,1))/dxI1)+1,1)
            ixPmax1=floor((xcmax1-xI(1,1,1))/dxI1)
            ixPmin2=max(floor((xcmin2-xI(1,1,2))/dxI2)+1,1)
            ixPmax2=floor((xcmax2-xI(1,1,2))/dxI2)

            EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=EUV(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+EUVt
            Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)=Dpl(ixPmin1:ixPmax1,ixPmin2:ixPmax2)+Fvt

          enddo
        enddo

      end select

      deallocate(flux,v)

    end subroutine integrate_EUV

    subroutine output_data(qunit,xO,dxO1,dxO2,wO,nXO1,nXO2,nWO,datatype)
      ! change the format of data and write data

      use mod_global_parameters
      use mod_usr_methods

      integer :: qunit,nXO1,nXO2,nWO
      double precision :: dxO1,dxO2
      double precision :: xO(nXO1,nXO2,2)
      double precision :: wO(nXO1,nXO2,nWO)
      character(20) :: datatype

      integer :: nPiece,nP1,nP2,nC1,nC2,nWC
      integer :: piece_nmax1,piece_nmax2,ix1,ix2,j,ipc,ixc1,ixc2
      double precision, allocatable :: xC(:,:,:,:),wC(:,:,:,:)

      ! how many cells in each grid
      if (datatype=='image') then
        select case(direction_LOS)
          case(1)
            piece_nmax1=block_nx2
            piece_nmax2=block_nx3
          case(2)
            piece_nmax1=block_nx3
            piece_nmax2=block_nx1
          case(3)
            piece_nmax1=block_nx1
            piece_nmax2=block_nx2
        end select
      else
        select case(direction_slit)
          case(1)
            piece_nmax2=block_nx1
          case(2)
            piece_nmax2=block_nx2
          case(3)
            piece_nmax2=block_nx3
          end select
          piece_nmax1=piece_nmax2
      endif


      LOOPN1: do j=piece_nmax1,1,-1
        if (mod(nXO1,j)==0) then
          nC1=j
          exit LOOPN1
        endif
      enddo LOOPN1

      LOOPN2: do j=piece_nmax2,1,-1
        if (mod(nXO2,j)==0) then
          nC2=j
          exit LOOPN2
        endif
      enddo LOOPN2


      ! how many grids
      nP1=nXO1/nC1
      nP2=nXO2/nC2
      nPiece=nP1*nP2
      nWC=nWO

      !print *, nWC,nWO


      ! put data into grids
      allocate(xC(nPiece,nC1,nC2,2))
      allocate(wC(nPiece,nC1,nC2,nWO))

      do ipc=1,nPiece
        do ixc1=1,nC1
          do ixc2=1,nC2
            ix1=mod(ipc-1,nP1)*nC1+ixc1
            ix2=floor(1.0*(ipc-1)/nP1)*nC2+ixc2
            xC(ipc,ixc1,ixc2,1)=xO(ix1,ix2,1)
            xC(ipc,ixc1,ixc2,2)=xO(ix1,ix2,2)
            do j=1,nWC
              wC(ipc,ixc1,ixc2,j)=wO(ix1,ix2,j)
            enddo
          enddo
        enddo
      enddo


      ! write data into vtu file
      call write_image(qunit,xC,wC,nPiece,nC1,nC2,nWC,datatype)

      deallocate(xC,wC)

    end subroutine output_data

    subroutine write_image(qunit,xC,wC,nPiece,nC1,nC2,nWC,datatype)
      ! write image data to vtu

      use mod_global_parameters
      use mod_usr_methods

      integer :: qunit
      integer :: nPiece,nC1,nC2,nWC
      double precision :: xC(nPiece,nC1,nC2,2)
      double precision :: wC(nPiece,nC1,nC2,nWC)
      character(20) :: datatype

      integer :: nP1,nP2
      double precision :: xP(nPiece,nC1+1,nC2+1,2)

      integer :: filenr
      logical :: fileopen
      character (30) :: subname,wname,vname,nameL,nameS
      character (50) :: filename
      integer :: ixC1,ixC2,ixP,ix1,ix2,j
      double precision :: dxP1,dxP2

      integer :: nc,np,icel,VTK_type

      integer :: mass
      double precision :: logTe
      character (30) :: ion,charge
      double precision :: line_center
      double precision :: spatial_rsl,spectral_rsl


      nP1=nC1+1
      nP2=nC2+1
      np=nP1*nP2
      nc=nC1*nC2

      dxP1=xC(1,2,1,1)-xC(1,1,1,1)
      dxP2=xC(1,1,2,2)-xC(1,1,1,2)

      ! cell corner location     
      do ixP=1,nPiece
        do ix1=1,nP1
          do ix2=1,nP2
            if (ix1<nP1) xP(ixP,ix1,ix2,1)=xC(ixP,ix1,1,1)-0.5d0*dxP1
            if (ix1==nP1) xP(ixP,ix1,ix2,1)=xC(ixP,ix1-1,1,1)+0.5d0*dxP2
            if (ix2<nP2) xP(ixP,ix1,ix2,2)=xC(ixP,1,ix2,2)-0.5d0*dxP1
            if (ix2==nP2) xP(ixP,ix1,ix2,2)=xC(ixP,1,ix2-1,2)+0.5d0*dxP2
          enddo
        enddo
      enddo


      ! get information of emission line
      call get_line_info(ion,charge,mass,logTe,line_center,spatial_rsl,spectral_rsl)


      if (datatype=='image') then
        ! filename for image
        write(wname,'(a,i4.4)') "Image_",wavelength
        select case(direction_LOS)
          case (1)
            write(subname,'(a,a)') trim(wname),"_xLOS_"
          case (2)
            write(subname,'(a,a)') trim(wname),"_yLOS_"
          case (3)
            write(subname,'(a,a)') trim(wname),"_zLOS_"
        end select
      else
        ! filename for spectra
        select case(direction_LOS)
          case (1)
            write(nameL,'(a)') "_xLOS_"
          case (2)
            write(nameL,'(a)') "_yLOS_"
          case (3)
            write(nameL,'(a)') "_zLOS_"
        end select

        select case(direction_slit)
          case (1)
            write(nameS,'(a)') "xSlit_"
          case (2)
            write(nameS,'(a)') "ySlit_"
          case (3)
            write(nameS,'(a)') "zSlit_"
        end select
        write(subname,'(a,i4.4,a,a)') "Spectra_",wavelength,trim(nameL),trim(nameS)
      endif


      if (mype==0) then
        inquire(qunit,opened=fileopen)
        if(.not.fileopen)then
          ! generate filename 
          filenr=snapshotini
          if (autoconvert) filenr=snapshotnext
          write(filename,'(a,a,i4.4,a)') trim(filename_euv),trim(datatype),filenr,".vtu"
          open(qunit,file=filename,status='unknown',form='formatted')
        endif

        ! generate xml header
        write(qunit,'(a)')'<?xml version="1.0"?>'
        write(qunit,'(a)',advance='no') '<VTKFile type="UnstructuredGrid"'
        write(qunit,'(a)')' version="0.1" byte_order="LittleEndian">'
        write(qunit,'(a)')'<UnstructuredGrid>'

        write(qunit,'(a)')'<FieldData>'
        write(qunit,'(2a)')'<DataArray type="Float32" Name="TIME" ',&
                           'NumberOfTuples="1" format="ascii">'
        write(qunit,*) real(global_time*time_convert_factor)
        write(qunit,'(a)')'</DataArray>'

        write(qunit,'(2a)')'<DataArray type="Float32" Name="logT" ',&
                           'NumberOfTuples="1" format="ascii">'
        write(qunit,*) real(logTe)
        write(qunit,'(a)')'</DataArray>'
        write(qunit,'(a)')'</FieldData>'


        do ixP=1,nPiece
          write(qunit,'(a,i7,a,i7,a)') &
                '<Piece NumberOfPoints="',np,'" NumberOfCells="',nc,'">'
          write(qunit,'(a)')'<CellData>'

          do j=1,nWC
            vname='Intensity'
            if (datatype=='image' .and. j==2) vname='Doppler'

            write(qunit,'(a,a,a)')&
              '<DataArray type="Float64" Name="',TRIM(vname),'" format="ascii">'
            write(qunit,'(200(1pe14.6))') ((wC(ixP,ixC1,ixC2,j),ixC1=1,nC1),ixC2=1,nC2)
            write(qunit,'(a)')'</DataArray>'
          enddo

          write(qunit,'(a)')'</CellData>'

          write(qunit,'(a)')'<Points>'
          write(qunit,'(a)')'<DataArray type="Float32" NumberOfComponents="3" format="ascii">'
          do ix2=1,nP2
            do ix1=1,nP1 
              if (datatype=='image') then
                select case(direction_LOS)
                  case(1)
                    write(qunit,'(3(1pe14.6))') 0.d0,xP(ixP,ix1,ix2,1),xP(ixP,ix1,ix2,2)
  
                  case(2)
                    write(qunit,'(3(1pe14.6))') xP(ixP,ix1,ix2,2),0.d0,xP(ixP,ix1,ix2,1)
  
                  case(3)
                    write(qunit,'(3(1pe14.6))') xP(ixP,ix1,ix2,1),xP(ixP,ix1,ix2,2),0.d0
                end select
              else
                write(qunit,'(3(1pe14.6))') xP(ixP,ix1,ix2,1),xP(ixP,ix1,ix2,2),0.d0
              endif
            enddo
          enddo
          write(qunit,'(a)')'</DataArray>'
          write(qunit,'(a)')'</Points>'

          ! connetivity part
          write(qunit,'(a)')'<Cells>'
          write(qunit,'(a)')'<DataArray type="Int32" Name="connectivity" format="ascii">'
          do ix2=1,nC2
            do ix1=1,nC1
              write(qunit,'(4(i7))') ix1-1+(ix2-1)*nP1,ix1+(ix2-1)*nP1,&
                                     ix1-1+ix2*nP1,ix1+ix2*nP1
            enddo
          enddo
          write(qunit,'(a)')'</DataArray>'

          ! offsets data array
          write(qunit,'(a)')'<DataArray type="Int32" Name="offsets" format="ascii">'
          do icel=1,nc
              write(qunit,'(i7)') icel*(2**2)
          end do
          write(qunit,'(a)')'</DataArray>'

          ! VTK cell type data array
          write(qunit,'(a)')'<DataArray type="Int32" Name="types" format="ascii">'
          ! VTK_LINE=3; VTK_PIXEL=8; VTK_VOXEL=11 -> vtk-syntax
          
          VTK_type=8        
          do icel=1,nc
             write(qunit,'(i2)') VTK_type
          enddo
          write(qunit,'(a)')'</DataArray>' 
          write(qunit,'(a)')'</Cells>'
          write(qunit,'(a)')'</Piece>'
        enddo

        write(qunit,'(a)')'</UnstructuredGrid>'
        write(qunit,'(a)')'</VTKFile>'

        close(qunit)
      endif

    end subroutine write_image

    subroutine get_EUV_spectra(qunit)
      use mod_global_parameters
      use mod_usr_methods

      integer :: qunit

      integer :: numV,numL,numSI,iv,iL
      double precision :: dv,dwL,dL,Lmin,Lmax,vmin,vmax
      double precision, allocatable :: v(:),xL(:),spectra(:,:)
      double precision, allocatable :: xI(:,:,:),wI(:,:,:)
      double precision :: xI^L,dxI1,dxI2
      integer :: ixI1,ixI2,numXI1,numXI2,numWI

      double precision :: xbmin(ndim),xbmax(ndim)
      double precision :: dx^D
      integer :: numX^D
      integer :: iigrid,igrid,j

      double precision, allocatable :: xO(:,:,:),wO(:,:,:)
      double precision :: dxO1,dxO2,rx1,rx2,area,sumEUV
      integer :: numXO1,numXO2,numWO
      double precision :: xOc^L,xc^L
      integer :: ixO1,ixO2,ix^L,ix1,ix2
      character(20) :: datatype

      integer :: mass
      double precision :: logTe
      character (30) :: ion,charge
      double precision :: lineCent
      double precision :: spaceRsl,wlRsl

      double precision :: arcsec,c

      datatype='spectra'
      arcsec=7.0d7/unit_length

      ! prepare for integration 
      {dx^D=dx(^D,refine_max_level) \}
      {numX^D=floor((xprobmax^D-xprobmin^D)/dx^D) \}
     
      select case(direction_slit)
        case (1)
          dL=dx1
          Lmin=xprobmin1
          Lmax=xprobmax1
          numL=numX1

        case (2)
          dL=dx2
          Lmin=xprobmin2
          Lmax=xprobmax2
          numL=numX2
        
        case (3)
          dL=dx3
          Lmin=xprobmin3
          Lmax=xprobmax3
          numL=numX3
      end select

      dv=2.d0   ! [km/s]
      c=const_c/1.d5  ! light speed
      numV=1024
      numXI1=numV
      numXI2=numL
      numWI=1
      
      allocate(xL(numL),v(numV),spectra(numV,numL))
      allocate(xI(numXI1,numXI2,2),wI(numXI1,numXI2,numWI))

      do iL=1,numL
        xL(iL)=Lmin+(iL-0.5)*dL
      enddo
      do iv=1,numV
        v(iv)=(iv-(numV/2.d0)-0.5d0)*dv
      enddo


      ! find slit and do integration
      spectra=0.d0
      do iigrid=1,igridstail; igrid=igrids(iigrid);
        ^D&xbmin(^D)=rnode(rpxmin^D_,igrid)\
        ^D&xbmax(^D)=rnode(rpxmax^D_,igrid)\
        do j=1,ndim
          if (j/=direction_LOS .and. j/=direction_slit .and. &
              location_slit>=xbmin(j) .and. location_slit<xbmax(j)) then
              call integrate_spectra(igrid,xL,v,spectra,numV,numL)
          endif
        enddo
      enddo

      numSI=numL*numV
      call MPI_ALLREDUCE(spectra,wI(:,:,1),numSI,MPI_DOUBLE_PRECISION, &
                       MPI_SUM,icomm,ierrmpi)

      ! fix small values
      do ixI1=1,numXI1
        do ixI2=1,numXI2
          if (wI(ixI1,ixI2,1)>0 .and. wI(ixI1,ixI2,1)<smalldouble) then
            wI(ixI1,ixI2,1)=0.d0
          endif
        enddo
      enddo


      ! Doppler velocity to wavelength
      call get_line_info(ion,charge,mass,logTe,lineCent,spaceRsl,wlRsl)
      dxI1=dv/c*lineCent
      do iv=1,numV
        xI(iv,:,1)=(1.d0+v(iv)/c)*lineCent
      enddo
      dxI2=dL
      do iL=1,numL
        xI(:,iL,2)=xL(iL)
      enddo
      xImin1=xI(1,1,1)-0.5d0*dxI1
      xImax1=xI(numV,1,1)+0.5d0*dxI1
      xImin2=xI(1,1,2)-0.5d0*dxI2
      xImax2=xI(1,numL,2)+0.5d0*dxI2
      wI=wI*c/lineCent


      ! change resolution
      dxO1=wlRsl
      dxO2=spaceRsl*arcsec
      numXO1=floor((xImax1-xImin1)/2.d0/dxO1)*2
      numXO2=floor((xImax2-xImin2)/2.d0/dxO2)*2
      numWO=numWI

      allocate(xO(numXO1,numXO2,2),wO(numXO1,numXO2,numWO))        

      if (resolution_euv=='instrument') then     
        wO=0.d0
   
        ! new cells with observational resolution
        do ixO1=1,numXO1
          do ixO2=1,numXO2
            xO(ixO1,ixO2,1)=(ixO1-numXO1/2-0.5d0)*dxO1+(xImax1+xImin1)/2.d0
            xO(ixO1,ixO2,2)=(ixO2-numXO2/2-0.5d0)*dxO2+(xImax2+xImin2)/2.d0

            xOcmin1=xO(ixO1,ixO2,1)-0.5d0*dxO1
            xOcmin2=xO(ixO1,ixO2,2)-0.5d0*dxO2
            xOcmax1=xO(ixO1,ixO2,1)+0.5d0*dxO1
            xOcmax2=xO(ixO1,ixO2,2)+0.5d0*dxO2
            ixmin1=floor((xOcmin1-xImin1)/dxI1)+1
            ixmin2=floor((xOcmin2-xImin2)/dxI2)+1
            ixmax1=ceiling((xOcmax1-xImin1)/dxI1)
            ixmax2=ceiling((xOcmax2-xImin2)/dxI2)

            area=0.d0
            sumEUV=0.d0
            do ix1=ixmin1,ixmax1
              do ix2=ixmin2,ixmax2
                rx1=1.d0
                rx2=1.d0
                xcmin1=xI(ix1,ix2,1)-0.5d0*dxI1
                xcmin2=xI(ix1,ix2,2)-0.5d0*dxI2
                xcmax1=xI(ix1,ix2,1)+0.5d0*dxI1
                xcmax2=xI(ix1,ix2,2)+0.5d0*dxI2

                if (xcmin1<xOcmin1) rx1=1.d0-(xOcmin1-xcmin1)/dxI1
                if (xcmin2<xOcmin2) rx2=1.d0-(xOcmin2-xcmin2)/dxI2
                if (xcmax1>xOcmax1) rx1=1.d0-(xcmax1-xOcmax1)/dxI1
                if (xcmax2>xOcmax2) rx2=1.d0-(xcmax2-xOcmax2)/dxI2

                area=area+rx1*rx2
                sumEUV=sumEUV+wI(ix1,ix2,1)*rx1*rx2
              enddo
            enddo
            if (area>0) then
              wO(ixO1,ixO2,1)=sumEUV/area
            endif

          enddo
        enddo

      endif
     

      ! output data
      if (resolution_euv=='instrument') then     
        call output_data(qunit,xO,dxO1,dxO2,wO,numXO1,numXO2,numWO,datatype)
      else
        call output_data(qunit,xI,dxI1,dxI2,wI,numXI1,numXI2,numWI,datatype)
      endif


      deallocate(v,xL,spectra,xI,wI,xO,wO)

    end subroutine get_EUV_spectra

    subroutine integrate_spectra(igrid,xL,v,inWL,numV,numL)
      ! get local spectra and integrate it along LOS
      use mod_global_parameters
      use mod_usr_methods

      integer :: igrid,numV,numL
      double precision :: xL(numL),v(numV),inWL(numV,numL)

      integer :: ixO^L,ixO^D,ixI^L,ix^D,i,j,k
      double precision :: dxb^D,xb^L,xd^D
      double precision, allocatable :: flux(:^D&),ve(:^D&)
      double precision, allocatable :: pth(:^D&),Te(:^D&)
      double precision, allocatable :: dpl(:^D&),vth2(:^D&)

      double precision :: unit_v,kB,mp,mi
      double precision :: inLC(numV)
      integer :: iv,ixLmin,ixLmax,ixL
      double precision :: dxL
      double precision :: xcmin^D,xcmax^D 

      integer :: ix(ndim),ixOmin(ndim),ixOmax(ndim)
      double precision :: dxb(ndim),xbmin(ndim),xbmax(ndim),xd(ndim)
      double precision :: xcmin(ndim),xcmax(ndim) 
      double precision :: vth2c,fluxc,dplc

      integer :: mass
      double precision :: logTe
      character (30) :: ion,charge
      double precision :: line_center
      double precision :: spatial_rsl,spectral_rsl

      call get_line_info(ion,charge,mass,logTe,line_center,spatial_rsl,spectral_rsl)

      unit_v=unit_velocity/1.d5   ! [km/s]
      kB=1.3807d-23
      mp=1.6726d-27
      mi=mp*mass
      dxL=xL(2)-xL(1)


      ^D&ixOmin^D=ixmlo^D\
      ^D&ixOmax^D=ixmhi^D\
      ^D&ixImin^D=ixglo^D\
      ^D&ixImax^D=ixghi^D\
      ^D&xbmin^D=rnode(rpxmin^D_,igrid)\
      ^D&xbmax^D=rnode(rpxmax^D_,igrid)\
      ^D&dxb^D=rnode(rpdx^D_,igrid)\


      allocate(flux(ixI^S),ve(ixI^S),pth(ixI^S),Te(ixI^S))
      allocate(dpl(ixI^S),vth2(ixI^S))


      ! get emission and plasma parameters
      call phys_get_pthermal(ps(igrid)%w,ps(igrid)%x,ixI^L,ixO^L,pth)
      Te(ixO^S)=pth(ixO^S)/ps(igrid)%w(ixO^S,iw_rho)*unit_temperature
      call get_EUV(wavelength,ixI^L,ixO^L,ps(igrid)%w,ps(igrid)%x,flux)
      ve(ixO^S)=ps(igrid)%w(ixO^S,iw_mom(direction_LOS))/ps(igrid)%w(ixO^S,iw_rho)
      dpl(ixO^S)=-ve(ixO^S)*unit_v
      vth2(ixO^S)=2*kB*Te(ixO^S)/mi/1.0e6   ! thermal width [km/s]


      ! calculate spectra for different LOS and slit directions
      ^D&ixOmin(^D)=ixmlo^D\
      ^D&ixOmax(^D)=ixmhi^D\
      ^D&xbmin(^D)=rnode(rpxmin^D_,igrid)\
      ^D&xbmax(^D)=rnode(rpxmax^D_,igrid)\
      ^D&dxb(^D)=rnode(rpdx^D_,igrid)\

      do j=1,ndim
        if (j/=direction_LOS .and. j/=direction_slit) then
          ! location of the slit
          ix(j)=floor((location_slit-xbmin(j))/dxb(j))+ixOmin(j)
        endif
      enddo

      do j=ixOmin(direction_slit),ixOmax(direction_slit)
        ! calculate along slit direction
        ix(direction_slit)=j
        inLC=0.d0

        do k=ixOmin(direction_LOS),ixOmax(direction_LOS)
          ! integrate along LOS direction 
          ix(direction_LOS)=k
          {ix^D=ix(^D)\}
          do iv=1,numV
            inLC(iv)=inLC(iv)+flux(ix^D)*(1/sqrt(dpi*vth2(ix^D)))*&
                     exp(-(v(iv)-dpl(ix^D))**2/vth2(ix^D))
          enddo
        enddo
        
        ix(direction_LOS)=ixOmin(direction_LOS)
        {ix^D=ix(^D)\}
        {xcmin(^D)=ps(igrid)%x(ix^DD,^D)-0.5d0*dxb^D\}
        {xcmax(^D)=ps(igrid)%x(ix^DD,^D)+0.5d0*dxb^D\}
        ixLmin=max(floor((xcmin(direction_slit)-xL(1))/dxL)+1,1)
        ixLmax=floor((xcmax(direction_slit)-xL(1))/dxL)
        do ixL=ixLmin,ixLmax 
          inWL(:,ixL)=inWL(:,ixL)+inLC(:)
        enddo
      enddo


      deallocate(flux,ve,pth,Te,dpl,vth2)

    end subroutine integrate_spectra
  }

end module mod_thermal_emission
